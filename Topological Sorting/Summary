对一个有向无环图(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边(u,v)∈E(G)，则u在线
性序列中出现在v之前。
可用一个有向图来表示，图中的顶点代表活动(子工程)，图中的有向边代表活动的先后关系，即有向边的起点的活动是终点活动的前序活动，只有当起点活动完成之后，
其终点活动才能进行。通常，我们把这种顶点表示活动、边表示活动间先后关系的有向图称做顶点活动网(Activity On Vertex network)，简称AOV网。
一个AOV网应该是一个有向无环图，即不应该带有回路，因为若带有回路，则回路上的所有活动都无法进行（对于数据流来说就是死循环）。在AOV网中，若不存在回路，
则所有活动可排列成一个线性序列，使得每个活动的所有前驱活动都排在该活动的前面，我们把此序列叫做拓扑序列(Topological order)，由AOV网构造拓扑序列的过
程叫做拓扑排序(Topological sort)。AOV网的拓扑序列不是唯一的，满足上述定义的任一线性序列都称作它的拓扑序列。

偏序(Patially order)是指，集合中只有部分元素之间可以比较的关系，在有向图中，任意两个顶点之间不存在环路即满足偏序关系，无论其是否联通。
全序(Total order)是偏序的一种特殊情况，即在偏序的基础上，任意两个顶点之间单向联通。

以排序举例：
	我们知道不同整数之间的大小关系是确定的，即1总是小于4的，不会有人说1大于或者等于4吧。这就是说，这个序列是满足全序关系的。而对于拥有全序关系的结构
    (如拥有不同整数的数组)，在其线性化(排序)之后的结果必然是唯一的。对于排序的算法，我们评价指标之一是看该排序算法是否稳定，即值相同的元素的排序结果
    是否和出现的顺序一致。比如，我们说快速排序是不稳定的，这是因为最后的快排结果中相同元素的出现顺序和排序前不一致了。如果用偏序的概念可以这样解释这
    一现象：相同值的元素之间的关系是无法确定的。因此它们在最终的结果中的出现顺序可以是任意的。而对于诸如插入排序这种稳定性排序，它们对于值相同的元
    素，还有一个潜在的比较方式，即比较它们的出现顺序，出现靠前的元素大于出现后出现的元素。因此通过这一潜在的比较，将偏序关系转换为了全序关系，从而保
    证了结果的唯一性。
	
拓扑排序中，结果具有唯一性的条件也是其所有顶点之间都具有全序关系。并且，如果拓扑排序结果唯一，该结果同时也代表了一条哈密顿路径(Hamilton path)，即在
图中沿边访问每个顶点恰好一次的路径。

	1. Kahn算法(BFS)：维护一个入度为0的顶点的集合，对集合中的顶点u，循环遍历由该顶点u引出的所有边，从图中移除这条边，同时获取该边的另外一个顶点v，如
           果该顶点v的入度在减去本条边之后为0，那么也将这个顶点v放到入度为0的集合中。当集合为空时，检验图中是否还存在任何边，若存在，说明图中至少有一条
           环路。时间复杂度为O(E+V(构建入度为0的集合，遍历每个节点和边)+E+V(搜索子节点，遍历每个节点和边))=O(2E+2V)。
        L← Empty list that will contain the sorted elements
        S ← Set of all nodes with no incoming edges
        while S is non-empty do
            remove a node n from S
            insert n into L
            foreach node m with an edge e from nto m do
                remove edge e from thegraph
                ifm has no other incoming edges then
                    insert m into S
        if graph has edges then
            return error (graph has at least onecycle)
        else 
            return L (a topologically sorted order)
	
	2. DFS: 构建一个邻接表(adjacency list)，由某个顶点开始遍历，到底后加入拓扑排序集合，然后依次将之前访问的节点加在之前(即将顶点插在首位)，即当顶
           点出度为0时加入结果集合。时间复杂度为O(V+E)。
        L ← Empty list that will contain the sorted nodes
        S ← Set of all nodes with no outgoing edges
        for each node n in S do
            visit(n) 
        function visit(node n)
            if n has not been visited yet then
                mark n as visited
                for each node m with an edge from m to n do
                    visit(m)
                add n to L
	
	1. LeetCode  207. Course Schedule: 判断是否为DAG
                     210. Course Schedule II: 输出Topological sorting
                     269. Alien Dictionary: 对相邻的两个字符串，找到第一个不相同的字母，构造邻接表和入度表，使用Kahn's算法输出Topological sorting
                     444. Sequence Reconstruction: 建图并输出Topological sorting
	2. Codeforces  510C. Fox And Names: 和269一样，建图并输出Topological sorting
                   875C. National Property: 与510C类似的方式建图并构造邻接表，u->v代表u>v，并标记需要修改的节点和不能修改的节点。从被修改的节点u开始
		         DFS遍历，当访问到节点v时，若v不能被修改，则此时u<v与u->v矛盾，结束程序；若v被修改，继续遍历；若v无状态，修改v并从v开始DFS遍历。
			 最后输出所有被修改的节点。
