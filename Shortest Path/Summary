求最短路径问题五种算法: 单源:Dijkstra,Bellman-Ford,SPFA。
                      多源:Floyd-Warshall,Johnson。

1. Dijkstra: 求单源(即给定起点终点)、无负权的最短路,思路为从当前节点找未标记的最近的节点,标记并松弛它的边。时间复杂度为O(V^2+E)。
   function Dijkstra(Graph, source):
      create vertex set Q
      for each vertex v in Graph:             // Initialization
          dist[v] ← INFINITY                  // Unknown distance from source to v
          prev[v] ← UNDEFINED                 // Previous node in optimal path from source
          add v to Q                          // All nodes initially in Q (unvisited nodes)
      dist[source] ← 0                        // Distance from source to source
      while Q is not empty:
          u ← vertex in Q with min dist[u]    // Node with the least distance
                                              // will be selected first
          remove u from Q 
          for each neighbor v of u:           // where v is still in Q.
              alt ← dist[u] + length(u, v)
              if alt < dist[v]:               // A shorter path to v has been found
                  dist[v] ← alt 
                  prev[v] ← u 
      return dist[], prev[]
  
   使用堆优化(优先队列),即队头出队,松弛它的边,再将松弛后的<新距离,节点>入队。时间复杂度为O((V+E)logV)。有向图中使用邻接表为O(ElogV)。
   使用Fibonacci堆优化降低时间复杂度为O(E+VlogV)。
   function Dijkstra(Graph, source):
      dist[source] ← 0                          // Initialization
      create vertex set Q
      for each vertex v in Graph:           
         if v ≠ source
             dist[v] ← INFINITY                 // Unknown distance from source to v
         prev[v] ← UNDEFINED                    // Predecessor of v
         Q.add_with_priority(v, dist[v])
      while Q is not empty:                     // The main loop
         u ← Q.extract_min()                    // Remove and return best vertex
         for each neighbor v of u:              // only v that are still in Q
             alt ← dist[u] + length(u, v) 
             if alt < dist[v]
                 dist[v] ← alt
                 prev[v] ← u
                 Q.decrease_priority(v, alt)
      return dist, prev
      
2. Bellman-Ford: 求单源最短路,可以用于负权路,可用于判断图中是否有负权回路(若有,则任意两点间的最短路径可以无穷小)。
   思想为对每一条边(u,v),若dist(u)+w(u,v)>dist(v),则更新dist(v),每一次循环至少更新并松弛一个点,即最多需要n-1次循环。时间复杂度为O(VE)。
   检测负值环: 一个节点松弛后还可以松弛,则存在负值环。
   function BellmanFord(list vertices, list edges, vertex source)
   ::distance[],predecessor[]
   // This implementation takes in a graph, represented as
   // lists of vertices and edges, and fills two arrays
   // (distance and predecessor) about the shortest path
   // from the source to each vertex
   // Step 1: initialize graph
   for each vertex v in vertices:
       distance[v] := inf             // At the beginning , all vertices have a weight of infinity
       predecessor[v] := null         // And a null predecessor
   distance[source] := 0              // The weight is zero at the source
   // Step 2: relax edges repeatedly
   for i from 1 to size(vertices)-1:
       for each edge (u, v) with weight w in edges:
           if distance[u] + w < distance[v]:
               distance[v] := distance[u] + w
               predecessor[v] := u
   // Step 3: check for negative-weight cycles
   for each edge (u, v) with weight w in edges:
       if distance[u] + w < distance[v]:
           error "Graph contains a negative-weight cycle"
   return distance[], predecessor[]
   
3. SPFA(Shortest Path Faster Algorithm): 在Bellman-Ford的基础上维护一个队列,使一个节点的当前最短路径被更新后不立刻更新其他的节点,减少重复操作。
   时间复杂度不稳定,best case O(E),worst case O(VE)。在负边权图和稀疏图中可以完全取代Bellman-Ford,在非负边权图中弱于Dijkstra。
   检测负值环: 每个元素入队的次数超过n则存在负值环。
   procedure Shortest-Path-Faster-Algorithm(G, s)
       for each vertex v ≠ s in V(G)
           d(v) := ∞
       d(s) := 0
       offer s into Q
       while Q is not empty
           u := poll Q
           for each edge (u, v) in E(G)
               if d(u) + w(u, v) < d(v) then
                   d(v) := d(u) + w(u, v)
                   if v is not in Q then
                       offer v into Q
                       
4. Floyd-Warshall: 求多源、可以有负边权的最短路,使用邻接矩阵存储图,思想为用动态规划考虑最短子路径来得到最短路径,分为两步(初始化和松弛)。
   初始化为从任意一条单边路径开始,所有两点之间的距离是边的权,或者如果两点之间没有边相连则为无穷大。
   松弛为对于每一对顶点(u,v),看看是否存在一个顶点w使得u->w->v的距离比己知的u->v的路径更短,如果存在则更新最短路径。
   动态规划过程: w(i,j)是节点i,j之间的边权,dp(i,j,k)为i->j的最短路径并以{1,2,...,k}节点为中间点,base case为dp(i,j,0)=w(i,j),
                dp(i,j,k)=min(dp(i,j,k-1)(最短路径不通过k节点),dp(i,k,k-1)+dp(k,j,k-1)(最短路径经过k节点))。
   时间复杂度为O(V^3),空间复杂度为O(V^2)。
   let dist be a |V| × |V| array of minimum distances initialized to ∞ (infinity)
   for each edge (u,v)
      dist[u][v] ← w(u,v)  // the weight of the edge (u,v)
   for each vertex v
      dist[v][v] ← 0
   for k from 1 to |V|
      for i from 1 to |V|
         for j from 1 to |V|
            if dist[i][j] > dist[i][k] + dist[k][j] 
              dist[i][j] ← dist[i][k] + dist[k][j]
          end if

5. Johnson: 求多源、可以有负边权的最短路,思路基于使用Dijkstra对全图节点遍历,通过re-weight对边权重新赋权。
   re-weight:在图中新增源顶点,其与其他各边的边权为0,使用Bellman-Ford计算新增节点到其他节点的最短路径h[],则w'(u,v)=w(u,v)+(h[u]-h[v])。
   时间复杂度为O(V(V+E)logV(对每个点使用Dijkstra)+VE(Bellman-Ford))=O(V^2logV+VElogV),在稀疏图中E较少,优于Floyd-Warshall。

1. LeetCode  743. Network Delay Time: 有向正权图,对每个点使用Dijkstra求全源最短路径,取其中最大值
             882. Reachable Nodes In Subdivided Graph: 无向正权图,用Dijkstra,以剩余步数作为权值
             787. Cheapest Flights Within K stops: 有向正权图,最短路径上最多有K个点,使用Bellman-Ford并记录每次循环的dist数组以确保
                  每个点在一次循环中至多更新一次,时间复杂度O(KE);使用Dijkstra需要给每个节点增加一个路径上节点数量的信息,使用优先队列
                  每次提取距离最短的节点,注意在松弛它的边的时,若节点距离未更新但节点数量更少,也需要将其入队,即在Dijkstra基础上增加了
                  更多的节点,worst case时需要考虑每个节点的所有状态(更新或者不更新),即2^xV,时间复杂度为O(Elog(2^xV)),x为该节点状态终止时的遍历次数。
2. Codeforces  20C. Dijkstra?: Dijkstra模板题  
               601A. The Two Routes: 若存在1->n,则火车可花1小时;若不存在,则汽车花1小时。则只需要求另一个的最短路径即可
               821D. Okabe and City: 无需邻接矩阵,构造点集并检查周围各点是否可达,以此设置边权
3. POJ  3268. Silver Cow Party: 有向正权图求全源最短路,从x出发求全源最短路,然后将矩阵转置,从x出发求全源最短路,等同于从各点出发到x的全源最短路
        3259. Wormholes: SPFA判断是否存在负权环,即每个节点最多入队n-1次
        1860. Currency Exchange: SPFA判断是否存在正权环,即每个节点最多入队n-1次
4. HDU  2680. Choose The Best Route: SPFA模板题
